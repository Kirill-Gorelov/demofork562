<style>
    .input-flex {
        display: -webkit-box;
        display: -ms-flexbox;
        display: flex;
        margin-right: -0.9375rem;
        margin-left: -0.9375rem;
        margin-top:.5rem;
        width: 100%;
        position: relative;
    }
    .input-flex > div {
        display: -webkit-box !important;
        display: -ms-flexbox !important;
        display: flex !important;
        -webkit-box-flex: 0;
        -ms-flex: 0 0 50%;
        flex: 0 0 50%;
        max-width: 50%;
        position: relative;
        padding-right: 0.9375rem;
        padding-left: 0.9375rem;
        -webkit-box-align: stretch !important;
        -ms-flex-align: stretch !important;
        align-items: stretch !important;
    
    }

    .btn-default {
        color: #4a4a4a;
        background-color: #E5E5E5;
        border-color: #E5E5E5;
        text-decoration: none;
    }
    .minus{
        color:#ff0000;
        font-weight: bold;
        font-size: 1.125rem;
        margin-left: .5rem;
        padding: 8px 10px !important;
    }
    .plus{
        color:#008000;
        font-weight: bold;
        font-size: 1.125rem;
        margin-left: .5rem;
        padding: 8px 10px 
    }

</style>
<div class="modal fade" id="EModalSelect" role="dialog" aria-labelledby="modalForSelect">
    <div class="modal-dialog" style="min-width: 950px;">
        <div class="modal-content">
            <div class="modal-body" style="margin: 0;">
                <form id="form_serialise">
                    <div id="parentId">
                        <div class="input-flex">
                            <div>
                                Название поля
                            </div>
                            <div>
                                Значение
                            </div>
                        </div>
                        <div class="input-flex clears" >
                            <div>
                                <input name="name[1]" type="text" class="form-control"/>
                                <a class="btn btn-default btn-xs minus" onclick="return deleteField(this)" href="#">—</a>
                            </div>
                            <div>
                                <input name="value[1]" type="text" class="form-control"/>
                                <a class="btn btn-default btn-xs plus" onclick="return addField()" href="#">+</a>
                            </div>
                        </div>
                        <div id="apend_list"></div>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-default update_modal_value">Добавить</button>
                <button type="button" class="btn btn-default" data-dismiss="modal">
                    <span class="fa fa-times"></span>Закрыть
                </button>
            </div>
        </div>
    </div>
</div>


<script>


var ModalSelect = function() { 

    var start = function(){
        // TODO: порядковый номер не вариант, надо приудумать как-то по другому
        r = document.querySelectorAll('.list-group select')
        r.forEach((element, index, arr) => {
            // console.log(element,index, arr);
            if(element.value == 'select'){
                // console.log(index)
                let elem = 'category_cmeta_'+index+'_value';
                let code_value = document.getElementById('category_cmeta_'+index+'_code').value;
                document.getElementById(elem).setAttribute("style", "display: none;");
                document.getElementById(elem).insertAdjacentHTML('afterend', '<button type="button" class="btn btn-default getvalueselect" data-element="'+code_value+'">Редактировать список</button>');
            }
        });
    }

    var loadSelectValue = function(){
        $('.getvalueselect').click(function(){
            $('#EModalSelect').modal();
            document.getElementsByClassName('update_modal_value')['0'].setAttribute("data-element", $(this).data('element'));
            getValueSelect($(this).data('element'));
        });
        // var number = document.getElementsByClassName('getvalueselect');
        // console.log(number);
        // for (var i = 1; i < number.length; i++) {
        //     var l = number[i];
        //     console.log(l);
        //     l.addEventListener('click', function () {
        //         $('#EModalSelect').modal()
        //         elm = this.getAttribute('data-element');
        //         getValueSelect(elm)
        //     });
        // }
    }

    var updateValueSelect =  function(){
        document.getElementsByClassName('update_modal_value')['0'].addEventListener('click', function () {
            digit = this.getAttribute('data-element');
            console.log(digit);
            let serialise_data = serializeArray(document.querySelector('#form_serialise'));
            console.log(serialise_data);
            
            $.ajax({
                url: '/backend/ajax',
                type: 'POST',
                data: {
                fork: { module: 'EnerIblocks', action: 'UpdateSelectValue' },
                    element:digit,
                    data:serialise_data,
                },
                success: function(data) {
                console.log(data);
                // location.reload();
                }
            });
        });
    }

    var getValueSelect = function(elm){
        //TODO: перередать на fetch или на xmlhttprequest
        console.log(elm);
        $.ajax({
                url: '/backend/ajax',
                type: 'POST',
                data: {
                fork: { module: 'EnerIblocks', action: 'LoadSelectValue' },
                element:elm,
            },
            success: function(data) {
                buildlist(data);
            }
        });
    }

    var buildlist = function(data){
        console.log(data);
        let apend_list = document.getElementById('apend_list');
        apend_list.innerHTML = '';
        // document.getElementsByClassName('clears').remove();
        // if(document.getElementsByClassName('clears')['1'] != undefined){
        // }
        $('.clears').remove();

        // document.getElementsByClassName('clears').forEach((element, index, arr) => {
        //     element.remove();
        // });

        if (data.data.response.length != 0){
            console.log('yes');
            data.data.response.forEach((element, index, arr) => {
                console.log(element);
                let elm_apend = '<div class="input-flex clears">'+
                    '<div >'+
                        '<input name="name[1]" type="text" value="'+element.key+'" class="form-control"/>'+
                        '<a class="btn btn-default btn-xs minus" onclick="return deleteField(this)" href="#">—</a>'+
                    '</div>'+
                    '<div>'+
                    '<input name="value[1]" type="text" value="'+element.value+'" class="form-control"/>'+
                        '<a class="btn btn-default btn-xs plus" onclick="return addField()" href="#">+</a>'+
                    '</div>'+
                    '</div>';
                console.log(elm_apend);
                apend_list.insertAdjacentHTML('afterend', elm_apend);
                // apend_list.appendChild(elm_apend);
            });
        }else{
            let elm_apend = '<div class="input-flex clears">'+
                    '<div >'+
                        '<input name="name[1]" type="text" class="form-control"/>'+
                        '<a class="btn btn-default btn-xs minus" onclick="return deleteField(this)" href="#">—</a>'+
                    '</div>'+
                    '<div>'+
                    '<input name="value[1]" type="text" class="form-control"/>'+
                        '<a class="btn btn-default btn-xs plus" onclick="return addField()" href="#">+</a>'+
                    '</div>'+
                    '</div>';
                console.log(elm_apend);
                apend_list.insertAdjacentHTML('afterend', elm_apend);
        }
    }

    var serializeArray = function (form) {
        // Setup our serialized data
        var serialized = [];

        // Loop through each field in the form
        for (var i = 0; i < form.elements.length; i++) {

            var field = form.elements[i];

            // Don't serialize fields without a name, submits, buttons, file and reset inputs, and disabled fields
            if (!field.name || field.disabled || field.type === 'file' || field.type === 'reset' || field.type === 'submit' || field.type === 'button') continue;

            // If a multi-select, get all selections
            if (field.type === 'select-multiple') {
                for (var n = 0; n < field.options.length; n++) {
                    if (!field.options[n].selected) continue;
                    serialized.push({
                        name: field.name,
                        value: field.options[n].value
                    });
                }
            }

            // Convert field data to a query string
            else if ((field.type !== 'checkbox' && field.type !== 'radio') || field.checked) {
                serialized.push({
                    name: field.name,
                    value: field.value
                });
            }
        }

        return serialized;

    }


    return {
        init: function() {
            start();
            loadSelectValue();
            updateValueSelect();
        }
    };

}();

$(window).load(function() { 
    ModalSelect.init();
});
</script>



<script>
    var curFieldNameId = 1; // Текущее число полей

function deleteField(a) {
    var contDiv = a.parentNode;
    contDiv.parentNode.remove();

    return false;
}

function addField() {
    curFieldNameId++;
    var div = document.createElement("div");
    //div.innerHTML = "<nobr><input name=\"name[" + curFieldNameId + "]\"  type=\"text\" style=\"width:300px; \" />  <a style=\"color:red;\" onclick=\"return deleteField(this)\" href=\"#\">[—]</a> <input name=\"value[" + curFieldNameId + "]\"   type=\"text\" style=\"width:300px; \" /> <a style=\"color:green; \" onclick=\"return addField()\" href=\"#\">[+]</a></nobr>";
    div.innerHTML = "<div class=\"input-flex clears\">"+
                        "<div>"+
                            "<input name=\"name[" + curFieldNameId + "]\" type=\"text\" class=\"form-control\"/>" +
                            "<a class=\"btn btn-default btn-xs minus\" onclick=\"return deleteField(this)\" href=\"#\">—</a>"+
                        "</div>"+
                        "<div>"+
                            "<input name=\"value[" + curFieldNameId + "]\" type=\"text\" class=\"form-control\"/>"+
                            "<a class=\"btn btn-default btn-xs plus\" onclick=\"return addField()\" href=\"#\">+</a>"+
                        "</div>"+
                    "</div>";
    document.getElementById("parentId").appendChild(div);
    return false;
}
</script>